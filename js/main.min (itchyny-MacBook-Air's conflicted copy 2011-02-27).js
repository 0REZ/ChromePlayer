/*!
 *        Chrome Player v1.55
 *              created by itchyny
 *
 *     Work on Google Chrome 9.0
 *     Copyright (c) 2011 itchyny
 *
 *     Last Modified: DATE
 *
 */( function () { var p = { data: { version: "1.55" } }, A = null, L = localStorage, $ = jQuery, D = (function (a, x) { a.forEach(function (b, _) { x[b] = jQuery('#' + b); }); return x; })(['about', 'conf', 'config', 'current', 'filename', 'fileselect', 'firstrow', 'globalcontrol', 'help', 'musicSlider', 'mute', 'next', 'open', 'pause', 'play', 'playlist', 'prev', 'property', 'remain', 'repeat', 'scheme', 'shuffle', 'tablebody', 'tablediv', 'tagread', 'volumeSlider', 'volumeon', 'wrapper'], {tbody: jQuery('tbody'), thead: jQuery('thead'), table: jQuery('table')}); $( function () { var lp = p; lp.ui.set(); lp.volume.set(); lp.key.set(); lp.repeat.set(); lp.shuffle.set(); lp.style.set(); lp.style.colorset(); }); ( function () { if(L.globalcontrol === undefined) { L.globalcontrol = p.data.globalcontrol = 'true'; } else { p.data.globalcontrol = L.globalcontrol; } if(L.tagread === undefined) { L.tagread = p.data.tagread = 'true'; } else { p.data.tagread = L.tagread; } chrome.extension && chrome.extension.onRequest.addListener( function (e, sender, sendResponse) { if(p.data.globalcontrol === 'false') { return; } var key = p.key; switch(e.keyCode) { case 32: key.space(e); return; case 37: key.left(e); return; case 38: key.up(e); return; case 39: key.right(e); return; case 40: key.down(e); return; case 173: case 119: key.f8(e); return; case 174: case 120: key.f9(e); return; case 175: case 121: key.f10(e); return; case 176: key.media_next_track(e); return; case 177: key.media_prev_track(e); return; case 178: key.media_stop(e); return; case 179: key.media_play_pause(e); return; } } ); String.prototype.toBin = (function () { var push = Array.prototype.push, join = Array.prototype.join; return function () { var ans = [], i = 9, b = this; while(--i) { push.call(ans, b & 128); b <<= 1; } return join.call(ans, ''); }; })(); String.prototype.unsynchsafe = (function () { var charCodeAt = String.prototype.charCodeAt; return function () { return ( ((charCodeAt.call(this, 0) & 0x7f) << 21) | ((charCodeAt.call(this, 1) & 0x7f) << 14) | ((charCodeAt.call(this, 2) & 0x7f) << 7) | ((charCodeAt.call(this, 3) & 0x7f))); }; })(); Array.prototype.shuffle = ( function () { var mathRandom = Math.random, mathFloor = Math.floor; return function () { var i = this.length; while(i) { var j = mathFloor( mathRandom() * i ), t = this[--i]; this[i] = this[j]; this[j] = t; } return this; }; })(); Array.prototype.unique = function () { var ans = []; for(var i = -1, l = this.length; ++i < l;) { for(var j = -1, m = ans.length, f = true; ++j < m;) { if(ans[j] === this[i]) { j = m + 1; f = false; } } if(f){ ans.push(this[i]); } } return ans; }; $.fn.unique = Array.prototype.unique; $.fn.join = Array.prototype.join; $.fn.texttitle = function (t) { return this .text(t) .attr('title', t); }; $.fn.S = (function () { var tablebody = document.getElementById("tablebody"); return function (flg) { if(this.size()) { this .addClass('ui-selected ddms_selected'); if(flg) { return this; } var offsetTop = this.offset().top, firstRow = D.thead.offset().top, rm = offsetTop - 50 - firstRow, ex = offsetTop + 50 - D.tablediv.height() - firstRow; if(rm < 0) { tablebody.scrollTop += rm; } else if(ex > 0) { tablebody.scrollTop += ex; } } return this; }; })(); $.fn.U = function (flg) { if(!flg) { this.S(); } return this .removeClass('ui-selected ddms_selected last-select'); }; $.fn.L = function () { $('tr.last-select', D.tbody) .removeClass('last-select'); return this .addClass('last-select'); }; $.fn.I = function () { return this .hasClass('ui-selected'); }; $.fn.drag_drop_multi_select.defaults.after_drop_action = function ($item, $old, $new, e, ui) { var itemNum = $item.first().attr('number'), trHgtHlf = $('tr', D.tbody).first().height() / 2, eY = e.clientY, $target = $('tr', D.tbody) .filter( function () { var d = eY - $(this).offset().top; return -trHgtHlf <= d && d < trHgtHlf; } ) .first(); if(itemNum === $target.attr('number')) { var $next = $item.last().next(); $item .insertBefore($next) .addClass('ui-selected moved'); } else { $item .insertBefore($target) .addClass('ui-selected moved'); } setTimeout(p.ui.selectableSet, 30); setTimeout( function () { $('tr.ui-selected', D.tbody) .removeClass('ui-selected moved last-select'); p.order.set(); }, 1000 ); }; })(); p.ui = { set: function () { $('div#appname a') .text('Chrome Player v' + p.data.version); $(window) .resize(p.style.set); document.body.ondragover = function (e) { e.preventDefault(); }; document.body.ondrop = function (e) { e.preventDefault(); p.core.readFiles(e.dataTransfer.files); }; D.help.click( function () { D.help.fadeOut(200); p.key.tab(0); }); D.config.click( function (e) { if(['a', 'input'].indexOf(e.target.localName) < 0) { D.config.fadeOut(200); p.key.tab(0); } }); D.about.click( function (e) { if(e.target.localName !== 'a') { D.about.fadeOut(200); p.key.tab(0); } }); D.property.click( function (e) { if(e.target.localName !== 'a') { D.property.fadeOut(200); p.key.tab(0); } }); $('img.lbutton, img.rbutton') .mouseup( function (e) { $(this).css({ 'top': '' }); }) .mousedown( function (e) { $(this).css({ 'top': parseInt($(this).css('top')) * 1.03 + '%' }); }); D.fileselect .change( function (e) { p.core.readFiles(e.target.files); }); D.open .click( function () { D.fileselect.click(); }); D.play .click(p.audio.toggle); D.pause .click(p.audio.toggle); D.prev .click(p.audio.prev); D.next .click(p.audio.next); D.mute .click(p.volume.mute); D.volumeon .click(p.volume.on); D.repeat .click(p.repeat.toggle); D.shuffle .click(p.shuffle.toggle); D.conf .click( function () { D.config.fadeToggle(200) } ); D.thead .find('th') .each( function (i, th) { $(this).click( ( function () { var order = 1; return function () { p.order.sort(i, order); order *= -1; }; })()) }); D.filename .click( function () { $('tr.ui-selected').U(); $('tr.nP').S().L(); p.key.tab(0); }); D.globalcontrol .attr({'checked':p.data.globalcontrol==='true'}) .change( function (e) { L.globalcontrol = p.data.globalcontrol = e.target.checked.toString(); }); D.tagread .attr({'checked':p.data.tagread==='true'}) .change( function (e) { L.tagread = p.data.tagread = e.target.checked.toString(); }); D.volumeSlider .slider({ 'min': 0, 'max': 256, 'step': 8, 'slide': p.volume.update, 'stop': p.volume.update }); D.musicSlider .slider({ 'min': 0, 'max': 1, 'step': 0.01, 'start': p.info.startSlide, 'stop': p.info.stopSlide }) .slider( 'disable' ); p.ui.selectableSet(); p.ui.resizableSet(); }, resizableSet: ( function () { var afterResize = function () { var s = [], data = {}, theadWidth = D.thead.width(); $('th:not(.splitter)') .each( function (i, th) { var w = $(this).width() / theadWidth; s.push('td:nth-child(' + (i + 1) + ') {width:' + w * 100 + '%!important;}'); data[$(this).attr('class')] = w; }); $('style#splitter')[0].innerText = s.join(''); L.splitter = JSON.stringify(data); }; setTimeout(afterResize, 10); return function () { $('th:not(.splitter)+th:not(.splitter)', D.thead) .each( function (i) { var flg = false, $splitter = $('<th />', {'class': 'splitter'}) .mousedown( function (e) { flg = true; }) .insertBefore($(this)); if(i === 0) return; $(window) .mouseup( function (e) { if(flg) { flg = false; afterResize(); } }) .mousemove( function (e) { if(flg) { var prevWidth, totalWidth = $splitter.prev().width() + $splitter.next().width(); $splitter.prev().width( prevWidth = -$splitter.prev().offset().left + e.clientX); $splitter.next().width( totalWidth - prevWidth ); } }); }); }; })(), selectableSet: function () { var tbodyWdt = D.tbody.width(); $('tr', D.tbody) .each( function () { var $self = $(this), n = $('<tr />') .attr({ 'number': $self.attr('number') }) .append($self.children()) .dblclick(p.audio.playThis) .click( function (e) { var $last = $('tr.last-select'); if(e.shiftKey && !e.altKey && $last.size()) { if(e.ctrlKey) { var selected = $('tr.ui-selected'); setTimeout( function () { selected.S(true); }, 20); } if(e.clientY < $last.position().top) { setTimeout( function () { $last .S(true) .L() .prevAll() .filter( function () { return $(this).position().top > e.clientY }) .S(true); }, 20); } else { setTimeout( function () { $last .S(true) .L() .nextAll() .filter( function () { return $(this).position().top < e.clientY }) .S(true); }, 20); } } }) .width(tbodyWdt) .addClass( $self.hasClass('nP') ? 'nP': '' ) .addClass( $self.hasClass('moved') ? 'ui-selected moved': '' ) .addClass( $self.hasClass('ui-selected') ? 'ui-selected': '' ) .appendTo(D.tbody); if($self.I()) { setTimeout( function () {n.S(true);}, 30); } }) .remove(); $.fn.drag_drop_multi_select.unique=0; $.fn.drag_drop_multi_select.stack=[]; $.fn.drag_drop_multi_select.settings=[]; D.tbody.drag_drop_multi_select({ 'element_to_drag_drop_select': 'tr, D.tbody', 'elements_to_drop': D.tbody, 'moveOpacity': 0.7 }); } }; p.key = ( function () { var meta = function (e) { return (e.global ? 'g' : '') + (e.ctrlKey ? 'c' : '') + (e.shiftKey ? 's' : '') + (e.altKey ? 'a' : ''); }; var click = function (t) { var i = D[t] || $('img#' + t); i.mousedown().click(); setTimeout( function () { i.mouseup() }, 200 ); }; var prevent = function (e) { e.preventDefault && e.preventDefault(); }; return { set: function () { var key = p.key; $(window) .keydown( function (e) { switch(e.keyCode) { case 9: key.tab(e); return; case 13: key.enter(e); return; case 27: key.esc(e); return; case 32: key.space(e); return; case 33: key.pgup(e); return; case 34: key.pgdn(e); return; case 35: key.end(e); return; case 36: key.home(e); return; case 37: key.left(e); return; case 38: key.up(e); return; case 39: key.right(e); return; case 40: key.down(e); return; case 46: key.del(e); return; case 65: key.a(e); return; case 79: key.o(e); return; case 82: key.r(e); return; case 85: key.u(e); return; case 112: key.f1(e); return; case 173: case 119: key.f8(e); return; case 174: case 120: key.f9(e); return; case 175: case 121: key.f10(e); return; case 191: key.question(e); return; case 176: key.media_next_track(e); return; case 177: key.media_prev_track(e); return; case 178: key.media_stop(e); return; case 179: key.media_play_pause(e); return; } } ); }, media_next_track: function (e) { prevent(e); click('next'); return; }, media_prev_track: function (e) { prevent(e); click('prev'); return; }, media_stop: function (e) { prevent(e); p.audio.pause(); return; }, media_play_pause: function (e) { prevent(e); click('play'); return; }, f1: function (e) { switch(meta(e)) { case '': prevent(e); D.about.fadeToggle(200); return; } }, f8: function (e) { switch(meta(e)) { case 'g': case '': if(A === null){ p.volume.toggleMute(); return; } A.volume ? click('mute') : click('volumeon') ; return; } }, f9: function (e) { switch(meta(e)) { case 'g': case '': prevent(e); p.volume.down(); return; } }, f10: function (e) { switch(meta(e)) { case 'g': case '': prevent(e); p.volume.up(); return; } }, pgup: function (e) { switch(meta(e)) { case '': prevent(e); D.tablebody.scrollTop( D.tablebody.scrollTop() - D.tablebody.height() * 0.8 ); $('tr.ui-selected') .U(true); $('tr', D.tbody) .filter( function () { return $(this).position().top > 0; } ) .first() .S() .L(); return; case 's': prevent(e); D.tablebody.scrollTop( D.tablebody.scrollTop() - D.tablebody.height() * 0.8 ); var h = window.innerHeight, $last = $('tr.last-select', D.tbody); if($last.next().I()) { $('tr.ui-selected') .filter( function () { return $(this).position().top > h - 50; }) .U(true); } else { $last .prevAll() .filter( function () { return $(this).position().top > 0; } ) .S(true) .last() .S(); } return; } }, pgdn: function (e) { switch(meta(e)) { case '': prevent(e); D.tablebody.scrollTop( D.tablebody.scrollTop() + D.tablebody.height() * 0.8 ); $('tr.ui-selected') .U(true); var h = window.innerHeight; $('tr', D.tbody) .filter( function () { return $(this).position().top < h; } ) .last() .S() .L(); return; case 's': prevent(e); D.tablebody.scrollTop( D.tablebody.scrollTop() + D.tablebody.height() * 0.8 ); if($('tr.last-select').prev().I()) { $('tr.ui-selected') .filter( function () { return $(this).position().top < D.thead.position().top + 40; } ) .U(true); } else { var h = window.innerHeight; $('tr.last-select') .nextAll() .filter( function () { return $(this).position().top < h; } ) .S(true) .last() .S(); } return; } }, question: function (e) { switch(meta(e)) { case 's': D.help.fadeToggle(200); if($('div#help:hidden').size()) { D.tablebody.focus(); } return; } }, tab: ( function () { var index = 0; return function (e) { if(typeof e === 'number') { index = 2 + e; } else { prevent(e); } switch(meta(e)) { case 's': ++index; case '': ++index; index %= 3; [D.tbody, $('div#musicSlider a'), $('div#volumeSlider a')][index].focus(); if(index === 0) { $('tr.ui-selected') .first() .S() .size() || $('tr.nP') .S() .L(); } return; } }; })(), space: function (e) { switch(meta(e)) { case 'gc': case 'c': case '': prevent(e); click('play'); return; } }, o: function (e) { switch(meta(e)) { case 'c': prevent(e); click('open'); return; } }, a: function (e) { switch(meta(e)) { case 'c': prevent(e); D.tbody .children() .S(true) .last() .L(); return; case 'cs': prevent(e); D.tbody .children() .U(true); return; } }, r: function (e) { switch(meta(e)) { case 'c': prevent(e); click('repeat'); return; } }, u: function (e) { switch(meta(e)) { case 'c': prevent(e); click('shuffle'); return; } }, end: function (e) { prevent(e); switch(meta(e)) { case 's': $('tr.ui-selected') .removeClass('ui-selected ddms_selected'); $('tr.last-select') .S(true) .nextAll() .S(true) .last() .S(); return; case '': $('tr.ui-selected') .U(true); D.tbody.children() .last() .S() .L(); return; } }, home: function (e) { prevent(e); switch(meta(e)) { case 's': $('tr.ui-selected') .removeClass('ui-selected ddms_selected'); $('tr.last-select') .S(true) .prevAll() .S(true) .last() .S(); return; case '': $('tr.ui-selected') .U(true); D.tbody.children() .first() .S() .L(); return; } }, esc: function (e) { prevent(e); switch(meta(e)) { case '': switch($('div#help:visible,div#config:visible,div#about:visible,div#property:visible').size()) { case 0: if($('div#musicSlider a:focus, div#volumeSlider a:focus').size()) { p.key.tab(0); $('div#musicSlider a, div#volumeSlider a').focusout(); } else { $('tr.ui-selected') .U(true); } return; default: D.config.add(D.help).add(D.property).add(D.about) .filter( function () { return $(':visible', this).size(); }) .last() .fadeOut(200); return; } } }, enter: function (e) { prevent(e); switch(meta(e)) { case '': switch($('div#help:visible,div#config:visible,div#about:visible,div#property:visible').size()) { case 0: p.audio.playThis( $('tr.ui-selected') .U(true) .first() .children() .first() ); return; default: D.config.add(D.help).add(D.property).add(D.about) .filter( function () { return $(':visible', this).size(); }) .last() .fadeOut(200); return; } case 'a': D.property.fadeIn(200); if(p.data.tagread === 'true' && p.data.tags) { var m = { 'TALB': 'album', 'TIT2': 'title', 'TPE1':'artist', 'TRCK': 'track', 'TDRC': 'year' }; var tags = $('tr.ui-selected').map( function (i, tr) {return p.data.tags[parseInt($(tr).attr('number'), 10)];}); for(var flameid in m) { $('dd#id' + m[flameid]) .text('　' + tags.map( function (i, x) {return x[flameid]}).unique().join()); } } return; } }, up: function (e) { prevent(e); switch(meta(e)) { case 'gc': case 'c': p.volume.up(); return; case 's': case 'cs': prevent(e); var $last = $('tr.last-select'); if($last.size()) { if($last.next().I()) { $last .nextAll() .filter( ( function () {var flg = true; return function () {return flg && (flg = $(this).I());} })() ) .last() .U(); } else { $last .prevAll() .filter( ( function () {var flg = true; return function () {return flg && (flg = $(this).next().I());} })() ) .last() .S(); } } return; case '': var $selected = $('tr.ui-selected'); prevent(e); if($selected.size()) { $selected .U(true) .prev() .andSelf() .first() .S() .L(); } else { $('tr.nP') .prev() .andSelf() .first() .S() .L() .size() || $('tr', D.tbody) .last() .S() .L(); } return; } }, down: function (e) { prevent(e); switch (meta(e)) { case 'gc': case 'c': p.volume.down(); return; case 'gca': case 'ca': if(A === null){ p.volume.toggleMute(); return; } A.volume ? click('mute') : click('volumeon') ; return; case 's': case 'cs': var $last = $('tr.last-select'); if($last.size()) { if($last.prev().I()) { $last .prevAll() .filter( ( function () {var flg = true; return function () {return flg && (flg = $(this).I());} })() ) .last() .U(); } else { $last .nextAll() .filter( ( function () {var flg = true; return function () {return flg && (flg = $(this).prev().I());} })() ) .last() .S(); } } return; case '': prevent(e); var $selected = $('tr.ui-selected'); if($selected.size()) { $selected .U(true) .next() .andSelf() .last() .S() .L(); } else { $('tr.nP') .next() .andSelf() .last() .S() .L() .size() || $('tr', D.tbody) .first() .S() .L(); } return; } }, left: function (e) { if($('a:focus', D.volumeSlider).size()) { return; } prevent(e); switch(meta(e)) { case '': p.audio.seekBy(-10); return; case 's': p.audio.seekBy(-30); return; case 'a': case 'gc': case 'c': click('prev'); return; } }, right: function (e) { if($('a:focus', D.volumeSlider).size()) { return; } prevent(e); switch(meta(e)) { case '': p.audio.seekBy(10); return; case 's': p.audio.seekBy(30); return; case 'a': case 'gc': case 'c': click('next'); return; } }, del: function (e) { $('tr.ui-selected') .remove(); p.order.set(); } }; })(); p.style = ( function () { var w; if(L.splitter === undefined) { w = { 'now': 0.05, 'filename': 0.10, 'artist': 0.20, 'title': 0.30, 'track': 0.05, 'album': 0.25 }; } else { w = JSON.parse(L.splitter); w.now = 0.05; } for(var thname in w) { $('th.' + thname) .width(w[thname] * (D.thead.width())); }; var scheme = { "classic-default": { "background-color": { "div#wrapper": "#aaa", "div#info": "#eee", "div#playlist": "#fff", "div#firstrow tr": "#ddd", "div#musicSlider": "#aaa", "div#musicSlider a": "#666", "div#musicSlider a:focus": "#333", "div#volumeSlider": "#eee", "tr:nth-child(odd) ": "#fff", "tr:nth-child(even) ": "#ddf", "tr.nP": "#aaf", "tr.ui-selected": "#08f" }, "color": { "tr.ui-selected": "#fff" } }, "classic-pink": { "background-color": { "div#wrapper": "#f66", "div#info": "#fbb", "div#firstrow tr": "#f99", "div#musicSlider": "#f66", "div#musicSlider a": "#844", "div#musicSlider a:focus": "#622", "div#volumeSlider": "#f88", "tr:nth-child(odd) ": "#fdd", "tr:nth-child(even) ": "#fbb", "tr.nP": "#f77", "div#playlist": "#fdd", "tr.ui-selected": "#f22" }, "color": { "tr.ui-selected": "#fff" } }, "classic-yellow": { "background-color": { "div#wrapper": "#ff0", "div#info": "#ff8", "div#firstrow tr": "#ff8", "div#musicSlider": "#ff0", "div#musicSlider a": "#880", "div#musicSlider a:focus": "#640", "div#volumeSlider": "#ff8", "tr:nth-child(odd) ": "#ff7", "tr:nth-child(even) ": "#ff6", "tr.nP": "#ff4", "div#playlist": "#ffb", "tr.ui-selected": "#ff0" }, "color": { "tr.ui-selected": "#000!important" } }, "classic-orange": { "background-color": { "div#wrapper": "#f80", "div#info": "#fb8", "div#firstrow tr": "#fb8", "div#musicSlider": "#f80", "div#musicSlider a": "#840", "div#musicSlider a:focus": "#620", "div#volumeSlider": "#fb8", "tr:nth-child(odd) ": "#ff8", "tr:nth-child(even) ": "#fd6", "tr.nP": "#fa0", "div#playlist": "#fdb", "tr.ui-selected": "#f60" }, "color": { "tr.ui-selected": "#000" } }, "classic-lime": { "background-color": { "div#wrapper": "#6f6", "div#info": "#bfb", "div#playlist": "#fff", "div#firstrow tr": "#9f9", "div#musicSlider": "#6f6", "div#musicSlider a": "#484", "div#musicSlider a:focus": "#262", "div#volumeSlider": "#8f8", "tr:nth-child(odd) ": "#dfd", "tr:nth-child(even) ": "#bfb", "tr.nP": "#7f7", "div#playlist": "#dfd", "tr.ui-selected": "#2f2" }, "color": { "tr.ui-selected": "#fff" } }, "classic-lblue": { "background-color": { "div#wrapper": "#66f", "div#info": "#bbf", "div#firstrow tr": "#99f", "div#musicSlider": "#66f", "div#musicSlider a": "#448", "div#musicSlider a:focus": "#226", "div#volumeSlider": "#88f", "tr:nth-child(odd) ": "#ddf", "tr:nth-child(even) ": "#bbf", "tr.nP": "#77f", "div#playlist": "#ddf", "tr.ui-selected": "#22f" }, "color": { "tr.ui-selected": "#fff" } }, "classic-purple": { "background-color": { "div#wrapper": "#f0f", "div#info": "#f8f", "div#firstrow tr": "#f8f", "div#musicSlider": "#f0f", "div#musicSlider a": "#808", "div#musicSlider a:focus": "#604", "div#volumeSlider": "#f8f", "tr:nth-child(odd) ": "#f7f", "tr:nth-child(even) ": "#f6f", "tr.nP": "#f4f", "div#playlist": "#fbf", "tr.ui-selected": "#f0f" }, "color": { "tr.ui-selected": "#000" } }, "classic-dark": { "background-color": { "div#wrapper": "#000", "div#info": "#333", "div#firstrow tr": "#333", "div#musicSlider": "#000", "div#musicSlider a": "#666", "div#musicSlider a:focus": "#999", "div#volumeSlider": "#333", "div#volumeSlider a": "#666", "div#volumeSlider a:focus": "#666", "tr:nth-child(odd) ": "#222", "tr:nth-child(even) ": "#292929", "tr.nP": "#444", "div#playlist": "#111", "tr.ui-selected": "#080808" }, "color": { "div#wrapper": "#fff" } } }, theme = 'classic-default', colorscheme = null; for(var s in scheme) { $('<a />') .attr('scheme', s) .css({ 'color': scheme[s]['color']['div#wrapper'] || 'black', 'background-color': scheme[s]['background-color']['div#wrapper'] }) .addClass( theme === s ? 'currentScheme' : '' ) .click( function () { p.style.themeset($(this).attr('scheme')); } ) .appendTo(D.scheme); } return { set: function () { p.key.tab(0); var tbodyWdt = D.tbody.width(), fontSize = 12 * (window.innerWidth - 1280) / 2360 + 12; D.wrapper .css({ 'font-size': fontSize }); D.playlist .height(window.innerHeight - D.playlist.offset().top - fontSize); D.tablediv .height(window.innerHeight - D.tablediv.offset().top - fontSize); D.tablebody .height(window.innerHeight - D.tablebody.offset().top - fontSize); D.play.attr( A !== null && A.paused ? { 'src': './img/play.png', 'title': 'Play' } : { 'src': './img/pause.png', 'title': 'Pause' }); $('tr') .css({ 'width': tbodyWdt }); }, themeset: function (t) { if(t in scheme) { theme = t; L.scheme = t; p.style.colorset(); } }, colorset: function () { theme = L.scheme/*p.local.getScheme()*/ || 'classic-default'; colorscheme = scheme[theme]; $('a.currentScheme').removeClass('currentScheme'); $('a[scheme=' + theme + ']').addClass('currentScheme'); var styles = []; for(var attr in colorscheme) { for(var selector in colorscheme[attr]) { styles.push( selector + ' { ' + attr + ':' + colorscheme[attr][selector] + ';}' ); } } $('style#sch').text(styles.join('\n')).size() || $('<style />', {'id': 'sch'}).text(styles.join('\n')).appendTo($('head')); } }; })(); p.volume = ( function () { var volume = 128, getFromSlider = function () { return parseInt(D.volumeSlider.slider('value'), 10); }, setToSlider = function (volume) { D.volumeSlider .slider({ 'value': volume }); }, setToAudioTag = function (volume) { if(A) A.volume = volume / 256; }, setVolume = function (volume) { if(L && !isNaN(volume) && typeof volume === 'number' && 0 <= volume && volume <= 256) { L.volume = volume; } }; return { set: function () { volume = (function(){ var volume = parseInt(L.volume, 10); if(L && volume && !isNaN(L.volume) && 0 <= volume && volume <= 256) { return volume; } else { return 128; } })(); setToAudioTag(volume); setToSlider(volume); }, update: function () { volume = getFromSlider(); setToAudioTag(volume); setVolume(volume); }, mute: function () { volume = getFromSlider(); setToAudioTag(0); setToSlider(0); setVolume(0); }, on: function () { setToAudioTag(volume); setToSlider(volume); setVolume(volume); }, toggleMute: function () { if(getFromSlider() === 0) { p.volume.on(); } else { p.volume.mute(); } }, up: function () { volume = Math.min(volume + 16, 256); setToAudioTag(volume); setToSlider(volume); setVolume(volume); }, down: function () { volume = Math.max(volume - 16, 0); setToAudioTag(volume); setToSlider(volume); setVolume(volume); } }; })(); p.audio = { play: function () { if(A === null) return; if(p.data.nP >= 0) { A.play(); p.style.set(); clearInterval(p.data.seek); p.data.seek = setInterval(p.info.seek, 500); D.musicSlider.slider('enable'); } }, playThis: function (e) { if(A === null) return; if(A.duration) { A.currentTime = 0; p.info.seek(); } p.audio.pause(); p.core.play( parseInt( $(e.target).closest('tr').attr('number') || e.closest('tr').attr('number') || e.attr('number'), 10 ) ); }, pause: function () { if(A === null) return; A.pause(); p.style.set(); clearInterval(p.data.seek); }, next: function () { p.audio.pause(); if(A !== null && p.repeat.get() === 'one' && A.duration) { A.currentTime = 0; p.audio.play(); var $selected = $('tr.ui-selected'); if($selected.size() < 2) { $selected.U(true); $('tr.nP').S().L(); } } else { if(A !== null && A.duration) { A.currentTime = 0; p.info.seek(); } var nextIndex = p.data.order[p.data.nP + 1]; if(nextIndex !== undefined && nextIndex >= 0) { p.core.play(nextIndex); } else if(p.repeat.get() === 'true') { p.order.set(); nextIndex = p.data.order[0]; if(nextIndex !== undefined) { p.core.play(nextIndex); } } else { p.order.set(); p.data.nP = -1; } } }, prev: function () { p.audio.pause(); if(A !== null && p.repeat.get() === 'one' && A.duration) { A.currentTime = 0; p.audio.play(); var $selected = $('tr.ui-selected'); if($selected.size() < 2) { $selected .U(true); $('tr.nP') .S() .L(); } } else { if(A !== null && A.duration) { A.currentTime = 0; p.info.seek(); } var prevIndex = p.data.order[p.data.nP - 1]; if(prevIndex >= 0) { p.core.play(prevIndex); } else if(p.repeat.get() === 'true') { prevIndex = p.data.order[p.data.order.length -1]; if(prevIndex !== undefined) { p.core.play(prevIndex); } } else { p.order.set(); p.data.nP = -1; } } }, toggle: function () { if(A === null) return; if(A.paused) { p.audio.play(); } else { p.audio.pause(); } }, seekBy: function (sec) { if(A === null) return; if(p.data.nP >= 0 && A.duration) { var cT = A.currentTime, dr = A.duration; if(sec < 0 && cT < -sec) { A.currentTime = 0; p.info.seek(); if(cT < -sec / 4) { p.audio.prev(); } } else if(cT + sec > dr) { A.currentTime = dr; p.info.seek(); p.audio.next(); } else { A.currentTime += sec; } p.info.seek(); } } }; p.order = { set: function () { var shuffle = p.shuffle.get(); p.data.order = []; $('tr') .each( function () { p.data.order.push( parseInt( $(this).attr('number'), 10 ) ); }); if(shuffle) { p.order.shuffle(); } p.data.nP = p.data.order.indexOf( parseInt( $('tr.nP').attr('number'), 10 ) ); }, shuffle: function () { p.data.order.shuffle(); }, sort: ( function () { var stack = []; return function (i, order) { if(i === undefined) { i = 1; } var f = function (x) {return x;}; stack[1] = stack[0] ? (i === stack[0].i ? stack[1] : stack[0]) : {i:1, order:1, f:function (x) {return x;}}; stack[0] = {i: i, order: order, f: f}; D.tbody .html( $('tr', D.tbody).sort( (function () { var o = order, r = stack[1].order, j = i, k = stack[1].i; return function (a, b) { var ajT = a.childNodes[j].innerText, bjT = b.childNodes[j].innerText, akT = a.childNodes[k].innerText, bkT = b.childNodes[k].innerText; return /*f*/(ajT) > /*f*/(bjT) ? o : /*f*/(ajT) < /*f*/(bjT) ? -o : /*stack[1].f*/(akT) >= /*stack[1].f*/(bkT) ? r : -r; }; })() ) ); p.ui.selectableSet(); p.order.set(); if($('tr.ui-selected').size() === 1) { $('tr.ui-selected') .S(); } } })() }; p.repeat = ( function () { var repeat = 'false', setToImg = function (repeat) { D.repeat .css({ 'opacity': (repeat === 'false' ? 0.4 : '') }) .attr({ 'src': (repeat === 'one' ? './img/one.png' : './img/repeat.png') }); }; return { set: function () { repeat = (function(){ if(L && L.repeat) { return L.repeat.toString(); } else { return 'false'; } })(); setToImg(repeat); }, toggle: function () { switch (repeat) { case 'true': repeat = 'one'; break; case 'one': repeat = 'false'; break; default: repeat = 'true'; } setToImg(repeat); L.repeat = repeat.toString(); }, get: function () { return repeat; } }; })(); p.shuffle = ( function () { var shuffle = 'false', setToImg = function (shuffle) { D.shuffle .css({ 'opacity': (shuffle.toString() === 'true' ? '' : 0.4) }); }; return { set: function () { shuffle = (function(){ if(L && L.shuffle) { return L.shuffle.toString(); } else { return 'false'; } })(); setToImg(shuffle); p.order.set(); }, toggle: function () { shuffle = (shuffle !== 'true').toString(); setToImg(shuffle); L.shuffle = shuffle.toString(); p.order.set(); }, get: function () { return shuffle === 'true'; } }; })(); p.info = { seek: ( function () { var convertTime = ( function () { var lparseInt = parseInt, lisNaN = isNaN; return function (sec) { sec = lparseInt(sec, 10); if(lisNaN(sec)) { return '00:00'; } var min = lparseInt((sec / 60) % 60, 10), hour = lparseInt(sec / 3600, 10); sec %= 60; if(hour > 0) { return hour.toString() + ':' + (min < 10 ? '0' : '') + min.toString() + ':' + (sec < 10 ? '0' : '') + sec.toString(); } else { return (min < 10 ? '0' : '') + min.toString() + ':' + (sec < 10 ? '0' : '') + sec.toString(); } }; })(), c = document.getElementById('current'), r = document.getElementById('remain'); return function () { var audioCurrentTime = A.currentTime, audioDuration = A.duration; D.musicSlider.slider({ 'value': audioCurrentTime / audioDuration }); c.innerText = convertTime(audioCurrentTime); r.innerText = '-' + convertTime(audioDuration - audioCurrentTime); }; })(), startSlide: function (e, ui) { clearInterval(p.data.seek); }, stopSlide: function (e, ui) { A.currentTime = A.duration * ui.value; p.data.seek = setInterval(p.info.seek, 500); }, showFileName: function (filename, index) { if(p.data.tags) { var tags = p.data.tags[index]; console.log(tags); if(tags && tags['TIT2']) { document.title = (tags['TIT2'] || '') + ' - ' + (tags['TPE1'] || '') + ',' + (tags['TALB'] || ''); filename = tags['TPE1'] + ' - ' + tags['TIT2']; } } document.title = filename; D.filename .texttitle(filename); } }; p.core = ( function () { var fs = []; var decode = function (chars) { switch(chars.charCodeAt(0)) { case 0: return chars.toString(); case 2: case 1: var a = "", StringfromCharCode = String.fromCharCode, kind; for(var i = 1, charslen = chars.length; i < charslen; ) { if(kind === 1 || ((chars.charCodeAt(i) & 0xff) === 0xff)) { if(!kind) { i += 2; kind = 1; } a += StringfromCharCode( chars.charCodeAt(i++) |(chars.charCodeAt(i++)<<8)); } else if(kind === 2 || ((chars.charCodeAt(i) & 0xfe) === 0xfe)) { if(!kind) { i += 2; kind = 2; } a += StringfromCharCode( (chars.charCodeAt(i++)<<8) |chars.charCodeAt(i++)); } else { a += chars[i++]; } } return a; case 3: var a = "", StringfromCharCode = String.fromCharCode; for(var i = 1, charslen = chars.length; i < charslen; ) { var charsi = chars.charCodeAt(i); if(charsi & 128) { if(charsi & 32) { if(charsi & 16) { if(charsi & 8) { if(charsi & 4) { a += StringfromCharCode( (chars.charCodeAt(i++)&1)<<30 |(chars.charCodeAt(i++)&63)<<24 |(chars.charCodeAt(i++)&63)<<18 |(chars.charCodeAt(i++)&63)<<12 |(chars.charCodeAt(i++)&6) |(chars.charCodeAt(i++)) ); } else { a += StringfromCharCode( (chars.charCodeAt(i++)&3)<<24 |(chars.charCodeAt(i++)&63)<<18 |(chars.charCodeAt(i++)&63)<<12 |(chars.charCodeAt(i++)&6) |(chars.charCodeAt(i++)) ); } } else { a += StringfromCharCode( (chars.charCodeAt(i++)&7)<<18 |(chars.charCodeAt(i++)&63)<<12 |(chars.charCodeAt(i++)&6) |(chars.charCodeAt(i++)) ); } } else { a += StringfromCharCode( (chars.charCodeAt(i++)&15)<<12 |(chars.charCodeAt(i++)&63)<<6 |(chars.charCodeAt(i++)&63) ); } } else { a += StringfromCharCode((chars.charCodeAt(i++)&31)<<6 |chars.charCodeAt(i++)&63); } } else { a += chars[i++]; } } return a; } }; var metaRead = ( function () { var onload = function (e, fileindex) { var result = e.target.result; var i = 0; var header = result.slice(i, i + 10); var headerflg = header.slice(5, 6).toBin(); var tagsize = header.slice(6, 10).unsynchsafe(); i = 10; if(headerflg[1] === '1') { var extendedsize = result.slice(i, i += 4).unsynchsafe(); var extendedheader = result.slice(i, i += extendedsize); } var tags = {}, ldecode = decode, lparseInt = parseInt; while(i < tagsize) { var flameid = result.slice(i, i += 4); var flamesize = ( function (x) {return lparseInt(x.charCodeAt(3), 10);})(result.slice(i, i += 4)); i += 2; var flametext = ldecode(result.slice(i, i += flamesize)); if(flamesize) { if(flametext) { tags[flameid] = flametext; } } } if(!p.data.tags) { p.data.tags = []; } p.data.tags[fileindex] = tags; $('tr[number=' + fileindex + ']') .find('.artist') .texttitle(tags['TPE1'] || '') .end() .find('.track') .texttitle(tags['TRCK'] || '') .end() .find('.title') .texttitle(tags['TIT2'] || '') .end() .find('.album') .texttitle(tags['TALB'] || ''); }; return function (file, index) { var binaryReader = new FileReader(); binaryReader.onload = function (e) {onload(e, index);}; binaryReader.readAsBinaryString(file.slice(0, 1000)); }; })(); return { readFiles: function (files) { var tbodyWdt = D.tbody.width(); $('tr', D.tbody) .each( function () { $('<tr />') .attr({ 'number': $(this).attr('number') }) .append($(this).children()) .dblclick(p.audio.playThis) .width(tbodyWdt) .appendTo(D.tbody) .addClass( $(this).hasClass('nP') ? 'nP': '' ); } ) .remove(); var tagread = p.core.tagread, tdnow = '<td class="now"></td>', d = document, rgx = new RegExp('audio\/.*(mp3|ogg|m4a|mp4)'), html = [], h = -1, trs = '<td><div class="artist"></div></td>' + '<td><div class="title"></div></td>' + '<td><div class="track"></div></td>' + '<td><div class="album"></div></td>' + '</tr>'; for(var i = -1, flen = files.length, fslen = fs.length; ++i < flen; ++fslen){ var f = files[i], ftype = f.type, fname = f.name; if(ftype.match(rgx)) { html[++h] = '<tr number="'; html[++h] = fslen; html[++h] = '" style="width:'; html[++h] = tbodyWdt; html[++h] = 'px;">'; html[++h] = '<td class="now">'; html[++h] = '<td><div class="filename" title="'; html[++h] = fname; html[++h] = '" >'; html[++h] = fname; html[++h] = '</div></td>'; html[++h] = trs; fs[fslen] = f; tagread(fslen); } } D.tbody[0].innerHTML += html.join(''); p.order.set(); if(A === null || p.data.nP < 0 && A.paused) { p.audio.next(); } p.ui.selectableSet(); window.fs = fs; }, tagread: function (index) { if(p.data.tagread === 'false') { return; } var file = fs[index]; if(file) { metaRead(file, index); } }, play: function (index) { var file = fs[index]; var blob = false; if(file) { if(!p.data.tags || !p.data.tags[index]) { p.core.tagread(index); setTimeout( function () { p.info.showFileName(file.fileName, index); }, 1000 ); } var reader = new FileReader(); reader.onload = function (e) { if(A !== null){ A.removeEventListener('ended', p.audio.next); A = null; } A = new Audio(e.target.result); p.volume.set(); p.audio.play(); A.addEventListener('ended', p.audio.next); e = null; }; reader.onerror = function (e) { p.audio.next(); }; reader.readAsDataURL(file); p.data.nP = p.data.order.indexOf(index); setTimeout( function () { p.info.showFileName(file.fileName, index); }, 100 ); } $('tr.nP') .removeClass('nP') .find('img') .remove(); $('tr[number=' + (index).toString() + ']') .addClass('nP') .find('.now') .append( '<img src="./img/now.png">' ); var $selected = $('tr.ui-selected'); if($selected.size() < 2) { $selected.U(true); $('tr.nP').S().L(); } } }; })(); p.file = ( function () { var errorHandler = function (e) { console.log('error occured'); console.dir(e); }; var fileSave = function (fs, file) { console.log('fileSave'); console.dir(fs); fs.root.getFile( 'music.mp3', {create:false}, function (fileEntry) { fileEntry.remove( function () { console.log('file removed'); }, errorHandler ); },errorHandler ); setTimeout(function () { fs.root.getFile( 'music.mp3', {create: true, exclusive: true}, function (fileEntry) { console.dir(fileEntry); fileEntry.createWriter( function (fileWriter) { fileWriter.onwriteend = function (e) { console.log('write completed'); console.dir(e); }; fileWriter.onerror = function (e) { console.log('write faild'); console.dir(e); }; fileWriter.write(file); }, errorHandler ); }, errorHandler ); }, 500); }; var fileRead = function (fs) { console.log('FileRead'); fs.root.getFile( 'music.mp3', {}, function(fileEntry) { fileEntry.file( function(file) { var reader = new FileReader(); reader.onloadend = function(e) { console.log('file readed'); A = new Audio(e.target.result); p.volume.set(); p.audio.play(); A.addEventListener('ended', p.audio.next); console.dir(e); }; reader.readAsDataURL(file); }, errorHandler ); }, errorHandler ); }; return { save: function (file) { console.log('save file'); console.dir(file); window.requestFileSystem( window.PERSISTENT, 25 * 1024 * 1024 /* 15MB */, function (fs) {fileSave(fs, file);}, errorHandler ); }, read: function () { console.log('read file'); setTimeout(function () { window.requestFileSystem( window.PERSISTENT, 25 * 1024 * 1024, fileRead, errorHandler ); }, 1000); } }; })();})();